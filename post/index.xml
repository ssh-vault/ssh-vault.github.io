<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ssh-vault</title>
    <link>https://ssh-vault.com/post/</link>
    <description>Recent content in Posts on ssh-vault</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright> </copyright>
    <lastBuildDate>Tue, 20 Sep 2016 04:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ssh-vault.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How it works</title>
      <link>https://ssh-vault.com/post/how-it-works/</link>
      <pubDate>Tue, 20 Sep 2016 04:00:00 +0000</pubDate>
      
      <guid>https://ssh-vault.com/post/how-it-works/</guid>
      <description>ssh-vault will randomly create a password and use it for encrypting the contents of the vault using a symmetric cipher AES256, the password later will be encrypted using the ssh-rsa public key of the receiver.
 https://en.wikipedia.org/wiki/Pretty_Good_Privacy
 This simplify the share of sensitive data across developers, teams, or either to store things on a public repository by just using ssh keys.
The option -u username will fetch the receiver ssh-rsa public from github:</description>
    </item>
    
    <item>
      <title>-u &lt;username&gt; or -u URL</title>
      <link>https://ssh-vault.com/post/u-option/</link>
      <pubDate>Tue, 20 Sep 2016 03:59:30 +0000</pubDate>
      
      <guid>https://ssh-vault.com/post/u-option/</guid>
      <description>-u  The option -u is used for fetching the ssh-rsa public keys, when passing a username for example:
$ ssh-vault -u alice  It will try to fetch the keys from github.com.
-u https://&amp;hellip; In case the keys are not in github, and url can be passed, for example:
$ ssh-vault -u https://launchpad.net/~user/+sshkeys  Using gitlab:
$ ssh-vault -u https://gitlab.com/&amp;lt;user&amp;gt;.keys  -k N There may be cases where the user has more than one key in this keys the option -k helps to specify what key to use, for example if we want to send something to user bob using his second key, this would be used:</description>
    </item>
    
    <item>
      <title>Fingerprint</title>
      <link>https://ssh-vault.com/post/fingerprint/</link>
      <pubDate>Tue, 20 Sep 2016 03:59:00 +0000</pubDate>
      
      <guid>https://ssh-vault.com/post/fingerprint/</guid>
      <description>SSH key fingerprint ssh-vault can be used to print the ssh key fingerprint compatible with the format that AWS uses.
To get the fingerprint for the key ~/.ssh/id_rsa.pub:
$ ssh-vault -f  For example to get the fingerprint for user Bob this could be used:
$ ssh-vault -u bob -f 24:c6:6f:33:49:de:d7:bb:77:cf:e9:78:4c:e9:25:5f  Using -u for remote server:
$ ssh-vault -u https://gitlab.com/bob.keys -f f8:33:95:0e:6e:35:93:39:18:cf:af:0d:34:5a:34:df  Or for a key that locally stored:</description>
    </item>
    
    <item>
      <title>Create vault from stdin</title>
      <link>https://ssh-vault.com/post/create-vault-from-stdin/</link>
      <pubDate>Tue, 20 Sep 2016 03:58:37 +0000</pubDate>
      
      <guid>https://ssh-vault.com/post/create-vault-from-stdin/</guid>
      <description>ssh-vault can read from standard input (stdin) when creating a vault.
Instead of creating a vault from scratch, a vault can be created by using an existing file, for example if Alice wants to send a file to Bob she could so something like:
cat /path/to/file | ssh-vault -u bob create bobs.vault   you can choose any name you want for the vault, in this example the vault contents will be written to file bobs.</description>
    </item>
    
    <item>
      <title>Group encryption</title>
      <link>https://ssh-vault.com/post/group-encryption/</link>
      <pubDate>Tue, 20 Sep 2016 03:56:00 +0000</pubDate>
      
      <guid>https://ssh-vault.com/post/group-encryption/</guid>
      <description>An approach for sharing a vault across a team would be:
 ssh-vault is not properly designed for group/broadcast encryption, therefore, this approach may not be the best depending on your security requirements.
 Have each group member own a public/private key pair.
Make a new group key pair and send it to each member within a vault.
 ssh-keygen -t rsa -b 4096 -C &amp;quot;group@acme.tld&amp;quot;  Send the key pair to each member in a secure way:</description>
    </item>
    
  </channel>
</rss>